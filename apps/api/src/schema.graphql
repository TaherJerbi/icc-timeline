### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

enum DelayActionType {
  CONTAIN
  PROPAGATE
}

type DelayLog {
  action: DelayActionType!
  delayEnd: DateTime!
  delayStart: DateTime!
  event: Event!
  eventId: String!
  id: ID!
}

type Event {
  confirmed: Boolean!
  delayLog: DelayLog
  id: ID!
  session: Session!
  sessionId: String!
  time: DateTime!
  type: EventType!
}

enum EventType {
  END
  START
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Movie {
  id: ID!
  movieSlug: String!
  posterPath: String
  realisateur: String!
  runningTime: Int!
  sessions: [Session!]!
  title: String!
}

type Query {
  events: [Event!]!
  populateTimelines(sessionsInput: [populateTimelinesInput!]!): [Timeline!]!
  users: [User!]!
}

type Salle {
  id: ID!
  name: String!
  timeline: Timeline
}

type Session {
  delay: Int!
  delayed: Boolean!
  description: String!
  endTime: DateTime!
  events: [Event!]!
  id: ID!
  movie: Movie
  movieSlug: String
  originalEndTime: DateTime!
  originalStartTime: DateTime!
  startTime: DateTime!
  timeline: Timeline!
  timelineId: String!
  title: String!
}

enum SessionType {
  DEBAT
  OTHER
  PAUSE
  PROJECTION
}

type Timeline {
  id: ID!
  salle: Salle!
  salleId: String!
  sessions: [Session!]!
}

type User {
  id: ID!
  role: UserRole!
  username: String!
}

enum UserRole {
  ADMIN
  PUBLIC
  TECHNICIAN
}

input populateTimelinesInput {
  description: String!
  endTime: DateTime!
  movieSlug: String
  posterPath: String
  realisateur: String
  runningTime: Int
  salle: String!
  startTime: DateTime!
  title: String!
  type: SessionType!
}