/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./Context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PopulateTimelinesMoviesInput: { // input type
    description: string; // String!
    movieSlug: string; // String!
    posterPath?: string | null; // String
    realisateur: string; // String!
    runningTime: number; // Int!
    title: string; // String!
  }
  PopulateTimelinesSessionsInput: { // input type
    description: string; // String!
    endTime: NexusGenScalars['DateTime']; // DateTime!
    movieSlug?: string | null; // String
    salle: string; // String!
    startTime: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    type: NexusGenEnums['SessionType']; // SessionType!
  }
}

export interface NexusGenEnums {
  DelayActionType: "CONTAIN" | "PROPAGATE"
  EventType: "END" | "START"
  SessionType: "DEBAT" | "OTHER" | "PAUSE" | "PROJECTION"
  UserRole: "ADMIN" | "PUBLIC" | "TECHNICIAN"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  DelayLog: { // root type
    action: NexusGenEnums['DelayActionType']; // DelayActionType!
    delayEnd: NexusGenScalars['DateTime']; // DateTime!
    delayStart: NexusGenScalars['DateTime']; // DateTime!
    eventId: string; // String!
    id: string; // ID!
  }
  Event: { // root type
    confirmed: boolean; // Boolean!
    id: string; // ID!
    sessionId: string; // String!
    time: NexusGenScalars['DateTime']; // DateTime!
    type: NexusGenEnums['EventType']; // EventType!
  }
  Movie: { // root type
    description: string; // String!
    id: string; // ID!
    movieSlug: string; // String!
    posterPath?: string | null; // String
    realisateur: string; // String!
    runningTime: number; // Int!
    title: string; // String!
  }
  Mutation: {};
  Query: {};
  Salle: { // root type
    id: string; // ID!
    name: string; // String!
  }
  Session: { // root type
    delay: number; // Int!
    delayed: boolean; // Boolean!
    description: string; // String!
    endTime: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    movieSlug?: string | null; // String
    originalEndTime: NexusGenScalars['DateTime']; // DateTime!
    originalStartTime: NexusGenScalars['DateTime']; // DateTime!
    startTime: NexusGenScalars['DateTime']; // DateTime!
    timelineId: string; // String!
    title: string; // String!
    type: NexusGenEnums['SessionType']; // SessionType!
  }
  Timeline: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    salleId: string; // String!
  }
  User: { // root type
    id: string; // ID!
    role: NexusGenEnums['UserRole']; // UserRole!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  DelayLog: { // field return type
    action: NexusGenEnums['DelayActionType']; // DelayActionType!
    delayEnd: NexusGenScalars['DateTime']; // DateTime!
    delayStart: NexusGenScalars['DateTime']; // DateTime!
    event: NexusGenRootTypes['Event']; // Event!
    eventId: string; // String!
    id: string; // ID!
  }
  Event: { // field return type
    confirmed: boolean; // Boolean!
    delayLog: NexusGenRootTypes['DelayLog'] | null; // DelayLog
    id: string; // ID!
    session: NexusGenRootTypes['Session']; // Session!
    sessionId: string; // String!
    time: NexusGenScalars['DateTime']; // DateTime!
    type: NexusGenEnums['EventType']; // EventType!
  }
  Movie: { // field return type
    description: string; // String!
    id: string; // ID!
    movieSlug: string; // String!
    posterPath: string | null; // String
    realisateur: string; // String!
    runningTime: number; // Int!
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    title: string; // String!
  }
  Mutation: { // field return type
    deleteTimeline: NexusGenRootTypes['Timeline'] | null; // Timeline
    populateTimelines: NexusGenRootTypes['Timeline'][]; // [Timeline!]!
  }
  Query: { // field return type
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    timelines: NexusGenRootTypes['Timeline'][]; // [Timeline!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Salle: { // field return type
    id: string; // ID!
    name: string; // String!
    timeline: NexusGenRootTypes['Timeline'] | null; // Timeline
  }
  Session: { // field return type
    delay: number; // Int!
    delayed: boolean; // Boolean!
    description: string; // String!
    endTime: NexusGenScalars['DateTime']; // DateTime!
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    id: string; // ID!
    movie: NexusGenRootTypes['Movie'] | null; // Movie
    movieSlug: string | null; // String
    originalEndTime: NexusGenScalars['DateTime']; // DateTime!
    originalStartTime: NexusGenScalars['DateTime']; // DateTime!
    startTime: NexusGenScalars['DateTime']; // DateTime!
    timeline: NexusGenRootTypes['Timeline']; // Timeline!
    timelineId: string; // String!
    title: string; // String!
    type: NexusGenEnums['SessionType']; // SessionType!
  }
  Timeline: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    salle: NexusGenRootTypes['Salle']; // Salle!
    salleId: string; // String!
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
  }
  User: { // field return type
    id: string; // ID!
    role: NexusGenEnums['UserRole']; // UserRole!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  DelayLog: { // field return type name
    action: 'DelayActionType'
    delayEnd: 'DateTime'
    delayStart: 'DateTime'
    event: 'Event'
    eventId: 'String'
    id: 'ID'
  }
  Event: { // field return type name
    confirmed: 'Boolean'
    delayLog: 'DelayLog'
    id: 'ID'
    session: 'Session'
    sessionId: 'String'
    time: 'DateTime'
    type: 'EventType'
  }
  Movie: { // field return type name
    description: 'String'
    id: 'ID'
    movieSlug: 'String'
    posterPath: 'String'
    realisateur: 'String'
    runningTime: 'Int'
    sessions: 'Session'
    title: 'String'
  }
  Mutation: { // field return type name
    deleteTimeline: 'Timeline'
    populateTimelines: 'Timeline'
  }
  Query: { // field return type name
    events: 'Event'
    timelines: 'Timeline'
    users: 'User'
  }
  Salle: { // field return type name
    id: 'ID'
    name: 'String'
    timeline: 'Timeline'
  }
  Session: { // field return type name
    delay: 'Int'
    delayed: 'Boolean'
    description: 'String'
    endTime: 'DateTime'
    events: 'Event'
    id: 'ID'
    movie: 'Movie'
    movieSlug: 'String'
    originalEndTime: 'DateTime'
    originalStartTime: 'DateTime'
    startTime: 'DateTime'
    timeline: 'Timeline'
    timelineId: 'String'
    title: 'String'
    type: 'SessionType'
  }
  Timeline: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    salle: 'Salle'
    salleId: 'String'
    sessions: 'Session'
  }
  User: { // field return type name
    id: 'ID'
    role: 'UserRole'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteTimeline: { // args
      timelineId: string; // String!
    }
    populateTimelines: { // args
      moviesInput: NexusGenInputs['PopulateTimelinesMoviesInput'][]; // [PopulateTimelinesMoviesInput!]!
      sessionsInput: NexusGenInputs['PopulateTimelinesSessionsInput'][]; // [PopulateTimelinesSessionsInput!]!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}